//go:build go1.22

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Follow user.
	// (POST /relation/{userID}:follow)
	PostRelationUserIDFollow(w http.ResponseWriter, r *http.Request, userID string)
	// Hide the user.
	// (POST /relation/{userID}:hide)
	PostRelationUserIDHide(w http.ResponseWriter, r *http.Request, userID string)
	// Unfollow user.
	// (POST /relation/{userID}:unfollow)
	PostRelationUserIDUnfollow(w http.ResponseWriter, r *http.Request, userID string)
	// Unhide the user.
	// (POST /relation/{userID}:unhide)
	PostRelationUserIDUnhide(w http.ResponseWriter, r *http.Request, userID string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostRelationUserIDFollow operation middleware
func (siw *ServerInterfaceWrapper) PostRelationUserIDFollow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameterWithOptions("simple", "userID", r.PathValue("userID"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRelationUserIDFollow(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRelationUserIDHide operation middleware
func (siw *ServerInterfaceWrapper) PostRelationUserIDHide(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameterWithOptions("simple", "userID", r.PathValue("userID"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRelationUserIDHide(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRelationUserIDUnfollow operation middleware
func (siw *ServerInterfaceWrapper) PostRelationUserIDUnfollow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameterWithOptions("simple", "userID", r.PathValue("userID"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRelationUserIDUnfollow(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRelationUserIDUnhide operation middleware
func (siw *ServerInterfaceWrapper) PostRelationUserIDUnhide(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameterWithOptions("simple", "userID", r.PathValue("userID"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRelationUserIDUnhide(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/relation/{userID}:follow", wrapper.PostRelationUserIDFollow)
	m.HandleFunc("POST "+options.BaseURL+"/relation/{userID}:hide", wrapper.PostRelationUserIDHide)
	m.HandleFunc("POST "+options.BaseURL+"/relation/{userID}:unfollow", wrapper.PostRelationUserIDUnfollow)
	m.HandleFunc("POST "+options.BaseURL+"/relation/{userID}:unhide", wrapper.PostRelationUserIDUnhide)

	return m
}

type PostRelationUserIDFollowRequestObject struct {
	UserID string `json:"userID"`
}

type PostRelationUserIDFollowResponseObject interface {
	VisitPostRelationUserIDFollowResponse(w http.ResponseWriter) error
}

type PostRelationUserIDFollow200Response struct {
}

func (response PostRelationUserIDFollow200Response) VisitPostRelationUserIDFollowResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostRelationUserIDFollowdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostRelationUserIDFollowdefaultJSONResponse) VisitPostRelationUserIDFollowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostRelationUserIDHideRequestObject struct {
	UserID string `json:"userID"`
}

type PostRelationUserIDHideResponseObject interface {
	VisitPostRelationUserIDHideResponse(w http.ResponseWriter) error
}

type PostRelationUserIDHide200Response struct {
}

func (response PostRelationUserIDHide200Response) VisitPostRelationUserIDHideResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostRelationUserIDHidedefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostRelationUserIDHidedefaultJSONResponse) VisitPostRelationUserIDHideResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostRelationUserIDUnfollowRequestObject struct {
	UserID string `json:"userID"`
}

type PostRelationUserIDUnfollowResponseObject interface {
	VisitPostRelationUserIDUnfollowResponse(w http.ResponseWriter) error
}

type PostRelationUserIDUnfollow200Response struct {
}

func (response PostRelationUserIDUnfollow200Response) VisitPostRelationUserIDUnfollowResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostRelationUserIDUnfollowdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostRelationUserIDUnfollowdefaultJSONResponse) VisitPostRelationUserIDUnfollowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostRelationUserIDUnhideRequestObject struct {
	UserID string `json:"userID"`
}

type PostRelationUserIDUnhideResponseObject interface {
	VisitPostRelationUserIDUnhideResponse(w http.ResponseWriter) error
}

type PostRelationUserIDUnhide200Response struct {
}

func (response PostRelationUserIDUnhide200Response) VisitPostRelationUserIDUnhideResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostRelationUserIDUnhidedefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostRelationUserIDUnhidedefaultJSONResponse) VisitPostRelationUserIDUnhideResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Follow user.
	// (POST /relation/{userID}:follow)
	PostRelationUserIDFollow(ctx context.Context, request PostRelationUserIDFollowRequestObject) (PostRelationUserIDFollowResponseObject, error)
	// Hide the user.
	// (POST /relation/{userID}:hide)
	PostRelationUserIDHide(ctx context.Context, request PostRelationUserIDHideRequestObject) (PostRelationUserIDHideResponseObject, error)
	// Unfollow user.
	// (POST /relation/{userID}:unfollow)
	PostRelationUserIDUnfollow(ctx context.Context, request PostRelationUserIDUnfollowRequestObject) (PostRelationUserIDUnfollowResponseObject, error)
	// Unhide the user.
	// (POST /relation/{userID}:unhide)
	PostRelationUserIDUnhide(ctx context.Context, request PostRelationUserIDUnhideRequestObject) (PostRelationUserIDUnhideResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostRelationUserIDFollow operation middleware
func (sh *strictHandler) PostRelationUserIDFollow(w http.ResponseWriter, r *http.Request, userID string) {
	var request PostRelationUserIDFollowRequestObject

	request.UserID = userID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRelationUserIDFollow(ctx, request.(PostRelationUserIDFollowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRelationUserIDFollow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRelationUserIDFollowResponseObject); ok {
		if err := validResponse.VisitPostRelationUserIDFollowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRelationUserIDHide operation middleware
func (sh *strictHandler) PostRelationUserIDHide(w http.ResponseWriter, r *http.Request, userID string) {
	var request PostRelationUserIDHideRequestObject

	request.UserID = userID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRelationUserIDHide(ctx, request.(PostRelationUserIDHideRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRelationUserIDHide")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRelationUserIDHideResponseObject); ok {
		if err := validResponse.VisitPostRelationUserIDHideResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRelationUserIDUnfollow operation middleware
func (sh *strictHandler) PostRelationUserIDUnfollow(w http.ResponseWriter, r *http.Request, userID string) {
	var request PostRelationUserIDUnfollowRequestObject

	request.UserID = userID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRelationUserIDUnfollow(ctx, request.(PostRelationUserIDUnfollowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRelationUserIDUnfollow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRelationUserIDUnfollowResponseObject); ok {
		if err := validResponse.VisitPostRelationUserIDUnfollowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRelationUserIDUnhide operation middleware
func (sh *strictHandler) PostRelationUserIDUnhide(w http.ResponseWriter, r *http.Request, userID string) {
	var request PostRelationUserIDUnhideRequestObject

	request.UserID = userID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRelationUserIDUnhide(ctx, request.(PostRelationUserIDUnhideRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRelationUserIDUnhide")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRelationUserIDUnhideResponseObject); ok {
		if err := validResponse.VisitPostRelationUserIDUnhideResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
